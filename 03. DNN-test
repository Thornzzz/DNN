{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "626b1eac",
   "metadata": {},
   "source": [
    "# 손글씨 Data(MNIST)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a274c82c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\User\\.conda\\envs\\py310tf2\\lib\\site-packages\\keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "467627d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_input, train_target), (test_input, test_target) = keras.datasets.mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3a4aa334",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 28, 28) (60000,)\n",
      "(10000, 28, 28) (10000,)\n"
     ]
    }
   ],
   "source": [
    "print(train_input.shape, train_target.shape)\n",
    "print(test_input.shape, test_target.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3bac5d06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, axs = plt.subplots(1, 10, figsize=(10,10))\n",
    "\n",
    "for i in range(10):\n",
    "    axs[i].imshow(train_input[i], cmap=\"gray_r\")\n",
    "    axs[i].axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a290dfc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 0, 4, 1, 9, 2, 1, 3, 1, 4]\n"
     ]
    }
   ],
   "source": [
    "print([train_target[i] for i in range(10)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "079f943a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8), array([5923, 6742, 5958, 6131, 5842, 5421, 5918, 6265, 5851, 5949],\n",
      "      dtype=int64))\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "print(np.unique(train_target, return_counts=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5c95945d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 이미지 형태 출력을 위한 pyplot 모듈 import\n",
    "import matplotlib.pyplot as plt\n",
    "# 위 60000개 데이터 배열에서 0번째 원소를 흑백으로 출력\n",
    "plt.imshow(train_input[0], cmap=\"gray_r\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d13ab96c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   3  18  18  18 126 136 175  26 166 255 247 127   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0  30  36  94 154 170 253 253 253 253 253 225 172 253 242 195  64   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0  49 238 253 253 253 253 253 253 253 253 251  93  82  82  56  39   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0  18 219 253 253 253 253 253 198 182 247 241   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0  80 156 107 253 253 205  11   0  43 154   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0  14   1 154 253  90   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0 139 253 190   2   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0  11 190 253  70   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0  35 241 225 160 108   1   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0  81 240 253 253 119  25   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0  45 186 253 253 150  27   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  16  93 252 253 187   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 249 253 249  64   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0  46 130 183 253 253 207   2   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0  39 148 229 253 253 253 250 182   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0  24 114 221 253 253 253 253 201  78   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0  23  66 213 253 253 253 253 198  81   2   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0  18 171 219 253 253 253 253 195  80   9   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0  55 172 226 253 253 253 253 244 133  11   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0 136 253 253 253 212 135 132  16   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n",
      "   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "################################\n",
    "\n",
    "# 0번째 원소의 모든 데이터를 출력\n",
    "for x in train_input[0]:\n",
    "    for i in x:\n",
    "        print(\"%4d\" % i, end=\"\")\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66ebd277",
   "metadata": {},
   "source": [
    "# 로지스틱 회귀로 손글씨 분류 하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6a509f48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 784)\n"
     ]
    }
   ],
   "source": [
    "train_scaled =  train_input / 255.0\n",
    "train_scaled = train_scaled.reshape(-1, 28*28)\n",
    "print(train_scaled.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "13ed6efa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.linear_model import SGDClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "73e04903",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fit_time': array([8.07838535, 8.20231056, 7.9714427 , 8.18332028, 8.14834261]), 'score_time': array([0.05496573, 0.081954  , 0.05097723, 0.0699594 , 0.06895947]), 'test_score': array([0.89725   , 0.885     , 0.88408333, 0.88425   , 0.909     ])}\n"
     ]
    }
   ],
   "source": [
    "sc =  SGDClassifier(loss=\"log_loss\", max_iter=5, random_state=42)\n",
    "\n",
    "scores = cross_validate(sc, train_scaled, train_target, n_jobs=-1)\n",
    "print(scores)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "784b0d2e",
   "metadata": {},
   "source": [
    "{'fit_time': array([8.12135768, 8.1753273 , 8.08837652, 8.47416782, 8.64906502]),\n",
    " 'score_time': array([0.04397535, 0.04497361, 0.04498529, 0.06296301, 0.04697704]),\n",
    " 'test_score': array([0.89725   , 0.885     , 0.88408333, 0.88425   , 0.909     ])}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "690bb925",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8919166666666666\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(scores[\"test_score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a5fa66f",
   "metadata": {},
   "source": [
    "# 인공신경망"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "73623040",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "from tensorflow.keras.optimizers import SGD"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0749832c",
   "metadata": {},
   "source": [
    "## 인공 신경망으로 모델 만들기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bb3691da",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_scaled, val_scaled, train_target, val_target = train_test_split(\n",
    "        train_scaled, train_target, test_size = 0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a29d0a91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(48000, 784) (48000,)\n",
      "(12000, 784) (12000,)\n"
     ]
    }
   ],
   "source": [
    "print(train_scaled.shape, train_target.shape)\n",
    "print(val_scaled.shape, val_target.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "da9bbb09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\User\\.conda\\envs\\py310tf2\\lib\\site-packages\\keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model = keras.Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e39204f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 신경망을 구성해줌\n",
    "model.add(Flatten(input_shape=(28*28,)))\n",
    "model.add(Dense(units=10, activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "365703b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# model이 어떻게 동작하는지 지정\n",
    "model.compile(optimizer=SGD(learning_rate=0.001),\n",
    "             loss=\"sparse_categorical_crossentropy\",\n",
    "             metrics=['accuracy'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2251a128",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3281 - accuracy: 0.9085 - val_loss: 0.3278 - val_accuracy: 0.9093\n",
      "Epoch 2/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3276 - accuracy: 0.9088 - val_loss: 0.3274 - val_accuracy: 0.9090\n",
      "Epoch 3/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3272 - accuracy: 0.9087 - val_loss: 0.3270 - val_accuracy: 0.9092\n",
      "Epoch 4/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3267 - accuracy: 0.9089 - val_loss: 0.3265 - val_accuracy: 0.9096\n",
      "Epoch 5/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3263 - accuracy: 0.9088 - val_loss: 0.3261 - val_accuracy: 0.9101\n",
      "Epoch 6/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3258 - accuracy: 0.9090 - val_loss: 0.3257 - val_accuracy: 0.9099\n",
      "Epoch 7/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3254 - accuracy: 0.9093 - val_loss: 0.3253 - val_accuracy: 0.9102\n",
      "Epoch 8/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3250 - accuracy: 0.9093 - val_loss: 0.3249 - val_accuracy: 0.9102\n",
      "Epoch 9/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3245 - accuracy: 0.9094 - val_loss: 0.3246 - val_accuracy: 0.9099\n",
      "Epoch 10/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3241 - accuracy: 0.9094 - val_loss: 0.3242 - val_accuracy: 0.9103\n",
      "Epoch 11/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3237 - accuracy: 0.9097 - val_loss: 0.3239 - val_accuracy: 0.9106\n",
      "Epoch 12/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3233 - accuracy: 0.9100 - val_loss: 0.3235 - val_accuracy: 0.9106\n",
      "Epoch 13/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3229 - accuracy: 0.9099 - val_loss: 0.3232 - val_accuracy: 0.9107\n",
      "Epoch 14/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3225 - accuracy: 0.9100 - val_loss: 0.3228 - val_accuracy: 0.9107\n",
      "Epoch 15/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3221 - accuracy: 0.9101 - val_loss: 0.3225 - val_accuracy: 0.9108\n",
      "Epoch 16/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3217 - accuracy: 0.9104 - val_loss: 0.3221 - val_accuracy: 0.9108\n",
      "Epoch 17/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3214 - accuracy: 0.9104 - val_loss: 0.3217 - val_accuracy: 0.9108\n",
      "Epoch 18/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3210 - accuracy: 0.9106 - val_loss: 0.3214 - val_accuracy: 0.9108\n",
      "Epoch 19/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3206 - accuracy: 0.9110 - val_loss: 0.3211 - val_accuracy: 0.9112\n",
      "Epoch 20/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3202 - accuracy: 0.9108 - val_loss: 0.3208 - val_accuracy: 0.9111\n",
      "Epoch 21/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3199 - accuracy: 0.9109 - val_loss: 0.3204 - val_accuracy: 0.9111\n",
      "Epoch 22/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3195 - accuracy: 0.9111 - val_loss: 0.3202 - val_accuracy: 0.9111\n",
      "Epoch 23/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3192 - accuracy: 0.9111 - val_loss: 0.3199 - val_accuracy: 0.9113\n",
      "Epoch 24/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3188 - accuracy: 0.9114 - val_loss: 0.3195 - val_accuracy: 0.9114\n",
      "Epoch 25/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3185 - accuracy: 0.9115 - val_loss: 0.3192 - val_accuracy: 0.9113\n",
      "Epoch 26/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3181 - accuracy: 0.9117 - val_loss: 0.3190 - val_accuracy: 0.9112\n",
      "Epoch 27/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3178 - accuracy: 0.9118 - val_loss: 0.3186 - val_accuracy: 0.9116\n",
      "Epoch 28/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3174 - accuracy: 0.9119 - val_loss: 0.3184 - val_accuracy: 0.9118\n",
      "Epoch 29/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3171 - accuracy: 0.9119 - val_loss: 0.3180 - val_accuracy: 0.9116\n",
      "Epoch 30/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3168 - accuracy: 0.9120 - val_loss: 0.3178 - val_accuracy: 0.9117\n",
      "Epoch 31/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3165 - accuracy: 0.9122 - val_loss: 0.3175 - val_accuracy: 0.9121\n",
      "Epoch 32/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3162 - accuracy: 0.9125 - val_loss: 0.3172 - val_accuracy: 0.9124\n",
      "Epoch 33/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3158 - accuracy: 0.9122 - val_loss: 0.3170 - val_accuracy: 0.9126\n",
      "Epoch 34/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3155 - accuracy: 0.9125 - val_loss: 0.3167 - val_accuracy: 0.9127\n",
      "Epoch 35/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3152 - accuracy: 0.9124 - val_loss: 0.3164 - val_accuracy: 0.9128\n",
      "Epoch 36/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3149 - accuracy: 0.9127 - val_loss: 0.3161 - val_accuracy: 0.9127\n",
      "Epoch 37/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3146 - accuracy: 0.9129 - val_loss: 0.3159 - val_accuracy: 0.9127\n",
      "Epoch 38/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3143 - accuracy: 0.9128 - val_loss: 0.3156 - val_accuracy: 0.9128\n",
      "Epoch 39/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3140 - accuracy: 0.9131 - val_loss: 0.3154 - val_accuracy: 0.9128\n",
      "Epoch 40/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3137 - accuracy: 0.9132 - val_loss: 0.3152 - val_accuracy: 0.9134\n",
      "Epoch 41/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3134 - accuracy: 0.9130 - val_loss: 0.3149 - val_accuracy: 0.9134\n",
      "Epoch 42/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3131 - accuracy: 0.9131 - val_loss: 0.3146 - val_accuracy: 0.9135\n",
      "Epoch 43/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3129 - accuracy: 0.9132 - val_loss: 0.3144 - val_accuracy: 0.9133\n",
      "Epoch 44/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3126 - accuracy: 0.9134 - val_loss: 0.3142 - val_accuracy: 0.9135\n",
      "Epoch 45/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3123 - accuracy: 0.9134 - val_loss: 0.3139 - val_accuracy: 0.9135\n",
      "Epoch 46/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3120 - accuracy: 0.9136 - val_loss: 0.3137 - val_accuracy: 0.9137\n",
      "Epoch 47/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3117 - accuracy: 0.9137 - val_loss: 0.3134 - val_accuracy: 0.9133\n",
      "Epoch 48/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3115 - accuracy: 0.9136 - val_loss: 0.3132 - val_accuracy: 0.9133\n",
      "Epoch 49/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3112 - accuracy: 0.9138 - val_loss: 0.3130 - val_accuracy: 0.9135\n",
      "Epoch 50/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3109 - accuracy: 0.9138 - val_loss: 0.3128 - val_accuracy: 0.9134\n",
      "Epoch 51/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3107 - accuracy: 0.9139 - val_loss: 0.3126 - val_accuracy: 0.9136\n",
      "Epoch 52/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3104 - accuracy: 0.9141 - val_loss: 0.3123 - val_accuracy: 0.9134\n",
      "Epoch 53/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3102 - accuracy: 0.9139 - val_loss: 0.3121 - val_accuracy: 0.9134\n",
      "Epoch 54/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3099 - accuracy: 0.9141 - val_loss: 0.3119 - val_accuracy: 0.9137\n",
      "Epoch 55/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3097 - accuracy: 0.9141 - val_loss: 0.3117 - val_accuracy: 0.9137\n",
      "Epoch 56/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3094 - accuracy: 0.9144 - val_loss: 0.3115 - val_accuracy: 0.9134\n",
      "Epoch 57/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3092 - accuracy: 0.9144 - val_loss: 0.3113 - val_accuracy: 0.9133\n",
      "Epoch 58/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3089 - accuracy: 0.9143 - val_loss: 0.3110 - val_accuracy: 0.9136\n",
      "Epoch 59/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3087 - accuracy: 0.9141 - val_loss: 0.3108 - val_accuracy: 0.9135\n",
      "Epoch 60/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3084 - accuracy: 0.9146 - val_loss: 0.3106 - val_accuracy: 0.9136\n",
      "Epoch 61/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3082 - accuracy: 0.9146 - val_loss: 0.3104 - val_accuracy: 0.9137\n",
      "Epoch 62/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3080 - accuracy: 0.9145 - val_loss: 0.3103 - val_accuracy: 0.9137\n",
      "Epoch 63/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3077 - accuracy: 0.9146 - val_loss: 0.3101 - val_accuracy: 0.9137\n",
      "Epoch 64/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3075 - accuracy: 0.9145 - val_loss: 0.3099 - val_accuracy: 0.9139\n",
      "Epoch 65/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3073 - accuracy: 0.9147 - val_loss: 0.3097 - val_accuracy: 0.9141\n",
      "Epoch 66/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3070 - accuracy: 0.9146 - val_loss: 0.3095 - val_accuracy: 0.9138\n",
      "Epoch 67/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3068 - accuracy: 0.9149 - val_loss: 0.3094 - val_accuracy: 0.9140\n",
      "Epoch 68/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3066 - accuracy: 0.9151 - val_loss: 0.3091 - val_accuracy: 0.9142\n",
      "Epoch 69/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3063 - accuracy: 0.9151 - val_loss: 0.3090 - val_accuracy: 0.9143\n",
      "Epoch 70/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3061 - accuracy: 0.9150 - val_loss: 0.3087 - val_accuracy: 0.9143\n",
      "Epoch 71/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3059 - accuracy: 0.9151 - val_loss: 0.3086 - val_accuracy: 0.9143\n",
      "Epoch 72/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3057 - accuracy: 0.9150 - val_loss: 0.3084 - val_accuracy: 0.9143\n",
      "Epoch 73/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3055 - accuracy: 0.9150 - val_loss: 0.3082 - val_accuracy: 0.9143\n",
      "Epoch 74/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3052 - accuracy: 0.9153 - val_loss: 0.3081 - val_accuracy: 0.9146\n",
      "Epoch 75/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3050 - accuracy: 0.9151 - val_loss: 0.3079 - val_accuracy: 0.9146\n",
      "Epoch 76/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3048 - accuracy: 0.9154 - val_loss: 0.3077 - val_accuracy: 0.9146\n",
      "Epoch 77/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3046 - accuracy: 0.9154 - val_loss: 0.3076 - val_accuracy: 0.9148\n",
      "Epoch 78/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3044 - accuracy: 0.9153 - val_loss: 0.3074 - val_accuracy: 0.9145\n",
      "Epoch 79/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3042 - accuracy: 0.9155 - val_loss: 0.3071 - val_accuracy: 0.9147\n",
      "Epoch 80/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3040 - accuracy: 0.9155 - val_loss: 0.3070 - val_accuracy: 0.9148\n",
      "Epoch 81/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3038 - accuracy: 0.9154 - val_loss: 0.3068 - val_accuracy: 0.9147\n",
      "Epoch 82/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3036 - accuracy: 0.9159 - val_loss: 0.3067 - val_accuracy: 0.9147\n",
      "Epoch 83/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3034 - accuracy: 0.9157 - val_loss: 0.3065 - val_accuracy: 0.9149\n",
      "Epoch 84/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3032 - accuracy: 0.9157 - val_loss: 0.3064 - val_accuracy: 0.9148\n",
      "Epoch 85/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3030 - accuracy: 0.9157 - val_loss: 0.3062 - val_accuracy: 0.9147\n",
      "Epoch 86/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3028 - accuracy: 0.9157 - val_loss: 0.3060 - val_accuracy: 0.9152\n",
      "Epoch 87/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3026 - accuracy: 0.9159 - val_loss: 0.3059 - val_accuracy: 0.9151\n",
      "Epoch 88/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3024 - accuracy: 0.9160 - val_loss: 0.3057 - val_accuracy: 0.9150\n",
      "Epoch 89/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3022 - accuracy: 0.9158 - val_loss: 0.3056 - val_accuracy: 0.9154\n",
      "Epoch 90/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3021 - accuracy: 0.9159 - val_loss: 0.3055 - val_accuracy: 0.9155\n",
      "Epoch 91/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3019 - accuracy: 0.9160 - val_loss: 0.3053 - val_accuracy: 0.9155\n",
      "Epoch 92/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3017 - accuracy: 0.9160 - val_loss: 0.3052 - val_accuracy: 0.9154\n",
      "Epoch 93/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3015 - accuracy: 0.9161 - val_loss: 0.3050 - val_accuracy: 0.9157\n",
      "Epoch 94/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3013 - accuracy: 0.9162 - val_loss: 0.3048 - val_accuracy: 0.9154\n",
      "Epoch 95/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3011 - accuracy: 0.9162 - val_loss: 0.3047 - val_accuracy: 0.9154\n",
      "Epoch 96/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3010 - accuracy: 0.9162 - val_loss: 0.3046 - val_accuracy: 0.9160\n",
      "Epoch 97/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3008 - accuracy: 0.9164 - val_loss: 0.3044 - val_accuracy: 0.9158\n",
      "Epoch 98/100\n",
      "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3006 - accuracy: 0.9163 - val_loss: 0.3042 - val_accuracy: 0.9158\n",
      "Epoch 99/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3004 - accuracy: 0.9164 - val_loss: 0.3041 - val_accuracy: 0.9156\n",
      "Epoch 100/100\n",
      "1500/1500 [==============================] - 2s 2ms/step - loss: 0.3002 - accuracy: 0.9165 - val_loss: 0.3040 - val_accuracy: 0.9158\n"
     ]
    }
   ],
   "source": [
    "# 설정이 다되었으면 모델 학습\n",
    "history = model.fit(train_scaled, train_target, epochs=100, verbose=1, validation_data=(val_scaled, val_target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "70cee6c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 784)\n"
     ]
    }
   ],
   "source": [
    "test_scaled =  test_input / 255.0\n",
    "test_scaled = test_scaled.reshape(-1, 28*28)\n",
    "print(test_scaled.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b907b4c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 0s 1ms/step - loss: 0.2931 - accuracy: 0.9176\n",
      "[0.2931129038333893, 0.9175999760627747]\n"
     ]
    }
   ],
   "source": [
    "# Evaluation\n",
    "\n",
    "print(model.evaluate(test_scaled, test_target))\n",
    "\n",
    "#       loss                accuracy\n",
    "# [0.2931129038333893, 0.9175999760627747]\n",
    "#                      0.8919166666666666  머신러닝\n",
    "\n",
    "# 우리 모델은 정확도가 91.7%인 모델이예요!\n",
    "# 머신러닝의 Regression 중 Logistic Regression을 여러개 결합해서\n",
    "# 구현한 Multinomial 구현이예요!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1cdd3133",
   "metadata": {},
   "outputs": [],
   "source": [
    "epochs = len(history.history['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ebc885f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_loss_acc(history, epochs):\n",
    "\n",
    "    loss, val_loss = history.history['loss'], history.history['val_loss']\n",
    "    acc, val_acc = history.history['accuracy'], history.history['val_accuracy']\n",
    "\n",
    "    fig, axes = plt.subplots(1, 2, figsize=(12, 4))\n",
    "\n",
    "    axes[0].plot(range(1, epochs + 1), loss, label='Training')\n",
    "    axes[0].plot(range(1, epochs + 1), val_loss, label='Validation')\n",
    "    axes[0].legend(loc='best')\n",
    "    axes[0].set_title('Loss')\n",
    "\n",
    "    axes[1].plot(range(1, epochs + 1), acc, label='Training')\n",
    "    axes[1].plot(range(1, epochs + 1), val_acc, label='Validation')\n",
    "    axes[1].legend(loc='best')\n",
    "    axes[1].set_title('Accuracy')\n",
    "\n",
    "    plt.show()\n",
    "    \n",
    "plot_loss_acc(history, epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cf2843b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
